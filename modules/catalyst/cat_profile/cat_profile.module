<?php

/**
 * Implementation of hook_perm()
 *
 */
function cat_profile_perm() {
  // Magic permission to grant if a role is to always have all permissions
  return array('always have all permissions');
}

/**
 * Implementation of hook_user()
 *
 * If the user has a role that has the above-defined permission, they will be (re)granted all
 * known permissions. This effectively makes them a "user 1".
 *
 */
function cat_profile_user($op, &$edit, &$account, $category = null) {
  if ($op == 'login') {
    $users_roles = user_roles(true, 'always have all permissions');
    module_load_include('inc', 'cat_profile');
    foreach ($users_roles as $role) {
      _site_profile_role_ensure_all_perms($role);
    }
  }
}

/**
 * Implementation of hook_menu()
 */
function cat_profile_menu() {
  return array(
    'admin/reports/cat-profile-dump' => array(
      'access arguments' => array('administer site configuration'),
      'title' => 'Dump site variable(s)',
      'type' => MENU_NORMAL_ITEM,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('cat_profile_var_dump_form'),
      'file' => 'cat_profile.inc'
    )
  );
}

/**
 * Implementation of hook_imagecache_default_presets
 *
 * @deprecated features supports imagecache settings.
 */
function cat_profile_imagecache_default_presets() {
  module_load_include('inc', 'cat_profile');
  return _cat_profile_imagecache_default_presets();
}

/**
 * Implementation of hook_features_api().
 * @author Josh Waihi (josh@catalyst.net.nz)
 */
function cat_profile_features_api() {
  return array(
    'cat_profile_roles' => array(
      'name' => t('Roles'),
      'default_hook' => 'cat_profile_perms',
    )
  );
}

/**
 * Implementation of hook_features_export_options().
 * @author Josh Waihi (josh@catalyst.net.nz)
 */
function cat_profile_roles_features_export_options() {
  $roles = user_roles(TRUE);
  unset($roles[DRUPAL_AUTHENTICATED_RID]);
  return array_combine($roles, $roles);
}

/**
 * Implementation of hook_features_export().
 * @author Josh Waihi (josh@catalyst.net.nz)
 */
function cat_profile_roles_features_export($data, &$export, $module_name = '') {
  foreach ($data as $role) {
    $export['features']['cat_profile_roles'][$role] = $role;
  }
}

/**
 * Implementation of hook_features_export_render().
 * @author Josh Waihi (josh@catalyst.net.nz)
 */
function cat_profile_roles_features_export_render($module_name, $data) {
  $roles = $role_names = array();
  $result = db_query('SELECT r.rid, r.name, p.perm FROM {role} r LEFT JOIN {permission} p ON r.rid = p.rid WHERE r.name IN (' . db_placeholders($data, 'text') . ')', $data);
  // Compile role array:
  // Add a comma at the end so when searching for a permission, we can
  // always search for "$perm," to make sure we do not confuse
  // permissions that are substrings of each other.
  while ($role = db_fetch_object($result)) {
    $role_permissions[$role->name] = $role->perm .',';
    $role_names[$role->rid] = $role->name;
  }

  // Render role/permission overview:
  foreach (module_invoke_all('perm') as $perm) {
    foreach ($data as $name) {
      // Builds arrays for checked boxes for each role
      if (strpos($role_permissions[$name], $perm .',') !== FALSE) {
        $roles[$name][] = $perm;
      }
    }
  }

  $code = "  \$roles = ". features_var_export($roles, '  ') .";\n";
  $code .= '  return $roles;';

  $code2 = "  \$names = " . features_var_export($role_names, '  ') . ";\n";
  $code2 .= '   return $names;';
  return array(
    'cat_profile_perms' => $code,
    'cat_profile_role_names' => $code2,
  );
}

/**
 * Implementation of hook_features_revert().
 * @author Josh Waihi (josh@catalyst.net.nz)
 */
function cat_profile_roles_features_revert($module) {
  // Firstly all the required roles exist with right ids.
  $names = (array) module_invoke($module, 'cat_profile_role_names');
  $roles = user_roles(TRUE);
  foreach ($names as $rid => $name) {
    if (isset($roles[$rid]) && ($name != $roles[$rid])) {
      db_query("UPDATE {role} SET name = '%s' WHERE rid = %d", $rid, $name);
    }
    elseif (!isset($roles[$rid])) {
      cat_profile_create_role($name);
      // Make sure the roles match.
      if ($rid != db_result(db_query('SELECT rid FROM {role} WHERE name = \'%s\'', $name))) {
        db_query("UPDATE {role} SET rid = %d WHERE name = '%s'", $rid, $name);
        global $db_type;
        if ($db_type == 'pgsql') {
          db_query("ALTER SEQUENCE {role}_rid_seq RESTART WITH %d", $rid+1);
        }
      }
    }
  }

  // Next, revert the permissions foreach role.
  $perms = module_invoke($module, 'cat_profile_perms');
  if (empty($perms)) {
    return;
  }
  module_load_include('inc', 'cat_profile');
  $result = db_query('SELECT r.name, p.perm FROM {role} r LEFT JOIN {permission} p ON r.rid = p.rid WHERE r.name IN (' . db_placeholders($perms, 'text') . ')', array_keys($perms));
  // Compile role array:
  // Add a comma at the end so when searching for a permission, we can
  // always search for "$perm," to make sure we do not confuse
  // permissions that are substrings of each other.
  while ($role = db_fetch_object($result)) {
    $permissions[$role->name] = explode(', ', $role->perm);
  }

  $ret = array();
  foreach ($perms as $name => $perms) {
    // Firstly discover if the role exists.
    if (!isset($permissions[$name])) {
      $ret[] = cat_profile_create_role($name);
      foreach ($perms as $perm) {
        $ret[] = cat_profile_role_add_permission($name, $perm);
      }
    }
    else {
      foreach ($permissions[$name] as $perm) {
        if (!in_array($perm, $perms)) {
          $ret[] = cat_profile_role_remove_permission($name, $perm);
        }
      }
      foreach ($perms as $perm) {
        if (!in_array($perm, $permissions[$name])) {
          $ret[] = cat_profile_role_add_permission($name, $perm);
        }
      }
    }
  }
}

