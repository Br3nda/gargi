<?php

/**
 * @file drupal_status.module
 * Drupal Status Client Module
 * Collects status data and emails it via cron
 */

/*
 * Map status constants to description
 * Status codes come from the 'update' module
 */
global $status_codes;
$status_codes = array();
$status_codes['1'] = 'Project is missing security update(s).';
$status_codes['2'] = 'Current release has been unpublished and is no longer available.';
$status_codes['3'] = 'Current release is no longer supported by the project maintainer.';
$status_codes['4'] = 'Project has a new release available, but it is not a security release.';
$status_codes['5'] = 'Project is up to date.';
$status_codes['-1'] = 'Project status cannot be checked.';
$status_codes['-2'] = 'No available update data was found for project.';

/**
* Implementation of hook_menu();
*/
function drupal_status_menu() {
  
  $items = array();
  $items['admin/reports/drupal_status'] = array(
    'title' => t('Drupal Status'),
    'description' => t('Administer Drupal Status'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drupal_status_admin_settings_form'),
    'access arguments' => array('administer drupal_status'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/reports/drupal_status/settings'] = array(
    'title' => t('Settings'),
    'access arguments' => array('administer drupal_status'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
  );
  $items['admin/reports/drupal_status/data'] = array(
    'title' => t('Data'),
    'access arguments' => array('administer drupal_status'),
    'page callback' => 'drupal_status_data_display',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );
  $items['admin/reports/drupal_status/json'] = array(
    'title' => t('JSON'),
    'access arguments' => array('administer drupal_status'),
    'page callback' => 'drupal_status_data_json',
    'type' => MENU_CALLBACK,
    'weight' => 2,
  );
  $items['admin/reports/drupal_status/run-cron'] = array(
    'description'        => t("Run drupal_status's cron"),
    'title'              => t("Run drupal_status's cron"),
    'page callback'           => 'drupal_status_run_cron',
    'access arguments' => array('administer drupal_status'),
    'type'               => MENU_CALLBACK,
  );

  return $items;
}

/**
* Implementation of hook_init()
*/
function drupal_status_init(){
  
  $server = variable_get('ds_server', array());
  $last_run = variable_get('ds_last_run', 0);
  $next_run = $last_run + variable_get('ds_phonehome_frequency', 86400);
  // refresh each status cron run
  if( (! $server) OR ($next_run < $server['timestamp']) AND isset($_SERVER['SERVER_NAME']) ){
    // add $_SERVER vars for reporting from command line cron
    $server = array(
      'timestamp' => time(),
      'SERVER_NAME' => $_SERVER['SERVER_NAME'],
      'SERVER_ADDR' => $_SERVER['SERVER_ADDR'],
      'SERVER_PORT' => $_SERVER['SERVER_PORT'],
      'SERVER_SOFTWARE' => $_SERVER['SERVER_SOFTWARE'],
      'DOCUMENT_ROOT' => $_SERVER['DOCUMENT_ROOT']
    );
    variable_set('ds_server', $server);
  }
  
}


/**
* Implementation of hook_perm()
*/
function drupal_status_perm(){
  
  return array(
    'administer drupal_status',
  );
}

/**
 * Admin settings form callback
 */
function drupal_status_admin_settings_form($form_values = null) {
  
  $last_run = variable_get('ds_last_run', 0);
  $form['ds_cron_last_run'] = array(
    '#type' => 'markup',
    '#value' =>
        $last_run
            ? '<p>' . t('Drupal status cron was last run @lastrun ago', array('@lastrun' => format_interval(time() - $last_run))) . '</p>'
            : '<p>' . t('Drupal status cron has never been run'),
    '#weight' => -4,
  );
  $form['ds_cron_run'] = array(
    '#type' => 'markup',
    '#value' => '<p>' . t(
        'You can <a href="@url">run the Drupal status cronjob manually</a> to check that drupal_status is working correctly.',
        array('@url' => url('admin/reports/drupal_status/run-cron'))
    ) . '</p>',
    '#weight' => -3,
  );
  $form['ds_mailto'] = array(
    '#type' => 'textfield',
    '#title' => t('Email Address'),
    '#description' => t('Enter the email address to send status reports to.'),
    '#default_value' => variable_get('ds_mailto', 'drupal.status@catalyst.net.nz'),
  );
  $form['ds_phonehome_frequency'] = array(
    '#type'          => 'select',
    '#title'         => t('How often to "phone home"'),
    '#description'   => t('How often should Drupal status send information back to the central collection point %email ?',
                          array('%email'=>variable_get('ds_mailto', 'drupal.status@catalyst.net.nz'))),
    '#options'       => array(
        3600    => 'Hourly',
        86400   => 'Daily',
        172800  => 'Every 2 days',
        604800  => 'Weekly',
        1209600 => 'Every 2 weeks',
        2592000 => 'Monthly',
        0       => 'Never',
    ),
    '#default_value' => variable_get('ds_phonehome_frequency', 86400),
  );
  return system_settings_form($form);
}

/**
 * Build status data array for emailing
 */
function drupal_status_drupal_status_data() {
  
  global $status_codes;
  
  $data = array();

  $general = $data['general'];

  $general['version'] = VERSION;
  $general['report_timestamp'] = time();
  $general['report_date'] = date("Y-m-d H:i:s", time());

  $settings = array('cron_last', 'site_name', 'site_mail');
  foreach ( $settings as $setting ) {
    $general[$setting] = variable_get($setting, '');
  }
  $general['cron_last_interval'] = format_interval(time() - $general['cron_last']). ' ago';

  $server = array('SERVER_SOFTWARE', 'SERVER_NAME', 'SERVER_ADDR', 'SERVER_PORT', 'DOCUMENT_ROOT');
  $server_vars = variable_get('ds_server', array()); // config var for access from command line cron
  foreach ( $server as $key ) {
    $general[$key] = isset($_SERVER[$key]) ? $_SERVER[$key] : $server_vars[$key];
  }

  $general['node_count'] = db_result(db_query('SELECT COUNT(*) FROM {node}'));
  $general['user_count'] = db_result(db_query('SELECT COUNT(*) FROM {users}'));
  $general['hostname'] = rtrim(`hostname -f`);
  $script_filename = escapeshellarg($_SERVER['SCRIPT_FILENAME']);
  $general['debian_package'] = rtrim(preg_replace('/\s*:.*/', '', `dpkg -S $script_filename`));
  if ( $general['debian_package'] ) {
    $debian_package = escapeshellarg($general['debian_package']);
    $general['debian_version'] = rtrim(shell_exec('dpkg-query -W  -f \'${version}\' ' . $debian_package));
  }
  $git_hash = `git rev-parse HEAD`;
  if ( $git_hash ) {
    $general['git_head'] = rtrim($git_hash);
    $general['git_origin'] = rtrim(`git config remote.origin.url`);
    $general['git_local_branch'] = rtrim(`git name-rev --name-only HEAD`);
    $general['git_remote_branch'] = shell_exec('git config branch.' . $general['git_local_branch'] . '.merge');
  }

  $data['general'] = $general;
    
  if(module_exists('update')){
    if ($available = update_get_available(TRUE)) {
      module_load_include('inc', 'update', 'update.compare');
      $modules = array();
      $components = update_calculate_project_data($available);
      foreach($components as $component => $value){
        $modules[$component] = array();
        $modules[$component]['name'] = $value['name'];
        $modules[$component]['description'] = $value['info']['description'];
        $modules[$component]['installed_version'] = $value['existing_version'];
        $modules[$component]['latest_version'] = $value['latest_version'];
        $modules[$component]['recommended_version'] = $value['recommended'];
        $modules[$component]['status'] = $value['status'];
        $modules[$component]['status_description'] = isset($status_codes[$value['status']]) ? $status_codes[$value['status']] : 'unknown';
      }
    }
    else {
      $modules = array('error'=>'no data');
    }
    $data['general']['update_module_installed'] = 'TRUE';
    $data['modules'] = $modules;
  }else{
    // simple version
    $data['general']['update_module_installed'] = 'FALSE';
    $data['modules'] = $module_cache = module_rebuild_cache();
  }
  return $data;
}

/**
 * Use a hook to get available status data
 * modules can implement hook_drupal_status_data
 * @return array status vars
 */
function drupal_status_data(){
  
  $data = module_invoke_all('drupal_status_data');
  // allow other modules to add / alter data via hook_drupal_status_data_alter
  drupal_alter('drupal_status_data', &$data);
  return $data;
}

/**
 * Show JSON encoded data
 */
function drupal_status_data_json(){
  
  $data = drupal_status_data();
  print json_encode($data);
}

/**
 * Display data
 */
function drupal_status_data_display(){
  
  $data = drupal_status_data();

  $content = '';

  $general = array();
  foreach ( $data['general'] as $key => $value ) {
    $general[] = array($key, $value);
  }

  $content .= '<p>' . l('Data in JSON format', 'admin/reports/drupal_status/json') . '</p>';
  $content .= '<h2>General</h2>';
  $content .= theme_table(
    array(
        'Key',
        'Value',
    ),
    $general
  );

  $content .= '<h2>Modules</h2>';
  
  if(module_exists('update')){
    // append advanced update status report
    module_load_include('inc', 'update', 'update.report');
    $content .= update_status();
  }else{
    
    $modules = array();
    foreach ( $data['modules'] as $module => $info ) {
      $modules[] = array(
        $module,
        $info->info['name'],
        $info->info['version'],
        $info->status ? 'Yes' : 'No',
      );
    }
    // append basic info only
    $content .= theme_table(
      array(
        'Module',
        'Name',
        'Version',
        'Installed',
      ),
      $modules
    );
  }

  return $content;
}

/**
 * Callback to manually run cron
 */
function drupal_status_run_cron() {
  
  drupal_status_cron(TRUE);
  drupal_goto('admin/reports/drupal_status');
}

/**
* Implementation of hook_cron()
* check if manual run or time period correct
*/
function drupal_status_cron($user = FALSE) {

  $last_run = variable_get('ds_last_run', 0);
  $next_run = $last_run + variable_get('ds_phonehome_frequency', 86400);

  if ( $next_run < time() or $user ) {
    $to = variable_get('ds_mailto', 'drupal.status@catalyst.net.nz');
    if ( drupal_mail('drupal_status', 'drupal_status_report', $to, 'en') ) {
      watchdog('drupal_status', 'Drupal Status successfully ran', array(), WATCHDOG_INFO, l('drupal_status settings', 'admin/reports/drupal_status'));
      if ( $user ) {
          drupal_set_message(t('Drupal Status successfully ran'));
      }
    }
    else {
        watchdog('drupal_status', 'Drupal Status failed to send email', array(), WATCHDOG_ERROR, l('drupal_status settings', 'admin/reports/drupal_status'));
    }
    variable_set('ds_last_run', time());
  }
}

/**
 * Implementation of hook_mail
 * Build email for sending
 */
function drupal_status_mail($key, &$message, $params){
  
  switch($key){
    case 'drupal_status_report':
      $server_vars = variable_get('ds_server', array());
      $site = isset($_SERVER['SERVER_NAME']) ? $_SERVER['SERVER_NAME'] : $server_vars['SERVER_NAME'];
      $message['subject'] = t('[status] !site',
                              array('!site'=> $site));
      $message['body'] = json_encode(drupal_status_data());
    break;
  }
}