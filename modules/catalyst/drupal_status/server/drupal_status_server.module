<?php

/**
 * @file drupal_status_server.module
 * Drupal Status Server Module
 * Reads inbox and imports email reports as nodes
 */

define('DRUPAL_STATUS_USERNAME', 'Drupal Status');
define('DRUPAL_STATUS_CATEGORY_NAME', 'Status Report Tags');
define('DRUPAL_STATUS_CATEGORY_DEFAULT_VID', 'dss_category_default_vid');
define('DRUPAL_STATUS_DEFAULT_UID', 'dss_category_default_uid');

/**
* Implementation of hook_menu();
*/
function drupal_status_server_menu() {
  
  $items = array();
  $items['admin/reports/drupal_status_server'] = array(
      'title' => t('Drupal Status Server'),
      'description' => t('Administer Drupal Status'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('drupal_status_server_admin_settings_form'),
      'access arguments' => array('administer drupal_status_server'),
      'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/reports/drupal_status_server/settings'] = array(
      'title' => t('Settings'),
      'access arguments' => array('administer drupal_status_server'),
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => 1,
  );
  $items['admin/reports/drupal_status_server/run-cron'] = array(
      'description'        => t("Run drupal_status_server's cron"),
      'title'              => t("Run drupal_status_server's cron"),
      'page callback'      => 'drupal_status_server_run_cron',
      'access arguments' => array('administer drupal_status'),
      'type'               => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implmentation of hook_node_info
 * Create associated node type for status reports
 */
function drupal_status_server_node_info() {
  
  return array(
    'status_report' => array(
      'name' => t('Status Report'),
      'module' => 'node',
      'description' => t("A content type for storing imported site status reports."),
    )
  );
}

/*
 *  Returns the user used by Drupal Status Server for report creation
 *  if no user exists it will create one
 */
function drupal_status_server_get_user() {

  $uid = variable_get(DRUPAL_STATUS_DEFAULT_UID, '');
  if (empty($uid) || ! user_load(array('uid' => $uid) )) {
    $sql = "SELECT uid FROM {users} WHERE name='%s'";
    $uid = db_result(db_query($sql, DRUPAL_STATUS_USERNAME));
    if (!$uid) {
      drupal_set_message(t("Created User: 'Drupal Status'"));
      //No user exists, so create one 
      $account = new stdClass();
      $account->name = 'Drupal Status';
      $account->mail = 'drupal.status@catalyst.net.nz';
      $account->pass = 'syst3m';
      $account->status = '1';
      $user = user_save($account, (array)$account);
      $uid = $user->uid;
    }
    variable_set(DRUPAL_STATUS_DEFAULT_UID, $uid);
  }
  if (!is_numeric($uid)) {
    watchdog('drupal_status', 'Drupal Status Server module was unable to select or create a user.', array(), WATCHDOG_ERROR);
  }
  return is_object($user) ? $user : user_load( array('uid'=> $uid) );
}

/*
 *  Returns the Vocabulary ID (vid) used by Drupal Status Server for categorization
 *  if no vocab exists it will create one
 */
function drupal_status_server_get_vid() {

  $vid = variable_get(DRUPAL_STATUS_CATEGORY_DEFAULT_VID, '');
  if (empty($vid) || !taxonomy_vocabulary_load($vid)) {
    $sql = "SELECT vid FROM {vocabulary} WHERE module='drupal_status_server'";
    $vid = db_result(db_query($sql));
    if (!$vid) {
      drupal_set_message(t("Created Vocabulary: '!vocab'", array('!vocab'=>DRUPAL_STATUS_CATEGORY_NAME)));
      //No vocabulary exists, we'll create one 
      $vocab = array(
        'name' => t(DRUPAL_STATUS_CATEGORY_NAME),
        'description' => t('Stores tags for imported reports'),
        'tags' => '1',
        'multiple' => '0',
        'required' => '0',
        'hierarchy' => '0',
        'relations' => '0',
        'nodes' => array('status_report' => 1),
        'module' => 'drupal_status_server',
      );
      taxonomy_save_vocabulary($vocab);
      $vid = $vocab['vid'];
    }
    variable_set(DRUPAL_STATUS_CATEGORY_DEFAULT_VID, $vid);
  }
  if (!is_numeric($vid)) {
    watchdog('drupal_status', 'Drupal Status Server module was unable to select or create a vocabulary.', array(), WATCHDOG_ERROR);
  }
  return $vid;
}

/**
 * Admin settings form
 */
function drupal_status_server_admin_settings_form($form_values = null) {
  
  $last_run = variable_get('dss_last_run', 0);
  $form['dss_cron_last_run'] = array(
      '#type' => 'markup',
      '#value' =>
          $last_run
              ? '<p>' . t('Drupal status server cron was last run @lastrun ago', array('@lastrun' => format_interval(time() - $last_run))) . '</p>'
              : '<p>' . t('Drupal status server cron has never been run'),
      '#weight' => -4,
  );
  $form['dss_cron_run'] = array(
      '#type' => 'markup',
      '#value' => '<p>' . t(
          'You can <a href="@url">run the Drupal status server cronjob manually</a> to check that Drupal status server is working correctly.',
          array('@url' => url('admin/reports/drupal_status_server/run-cron'))
      ) . '</p>',
      '#weight' => -3,
  );
  $form['dss_import_frequency'] = array(
      '#type'          => 'select',
      '#title'         => t('How often to import reports from the mailbox'),
      '#description'   => t('How often should Drupal status import information from the central collection point %email ?',
                            array('%email'=>variable_get('drupal_status_mailto', 'drupal.status@catalyst.net.nz'))),
      '#options'       => array(
          3600    => 'Hourly',
          86400   => 'Daily',
          172800  => 'Every 2 days',
          604800  => 'Weekly',
          1209600 => 'Every 2 weeks',
          2592000 => 'Monthly',
          0       => 'Never',
      ),
      '#default_value' => variable_get('dss_import_frequency', 86400),
  );
  $form['dss_mail'] = array(
      '#type' => 'fieldset',
      '#title' => t('Email Settings'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
  );
  $form['dss_mail']['dss_mail_user'] = array(
      '#type' => 'textfield',
      '#title' => t('User Account'),
      '#description' => t('User account for POP3 email import.'),
      '#default_value' => variable_get('dss_mail_user', 'drupal.status'),
  );
  $form['dss_mail']['dss_mail_pass'] = array(
      '#type' => 'textfield',
      '#title' => t('User Password'),
      '#description' => t('Enter the password for the account.'),
      '#default_value' => variable_get('dss_mail_pass', 'password'),
  );
  $form['dss_mail']['dss_mail_server'] = array(
      '#type' => 'textfield',
      '#title' => t('Mail Server'),
      '#description' => t('Enter the mail server to import from.'),
      '#default_value' => variable_get('dss_mail_server', 'mail2.catalyst.net.nz'),
  );
  $form['dss_mail']['dss_mail_port'] = array(
      '#type' => 'textfield',
      '#title' => t('Mail Port'),
      '#description' => t('Enter the POP3 port on the mail server.'),
      '#default_value' => variable_get('dss_mail_port', '110'),
  );
  return system_settings_form($form);
}

/**
 * Callback to manually run status server cron
 */
function drupal_status_server_run_cron() {
  
  drupal_status_server_cron(TRUE);
  drupal_goto('admin/reports/drupal_status_server');
}

/**
* Implementation of hook_cron()
* pass TRUE to bypass time check
*/
function drupal_status_server_cron($user = FALSE) {

    $last_run = variable_get('dss_last_run', 0);
    $next_run = $last_run + variable_get('dss_import_frequency', 86400);

    if ( $next_run < time() or $user ) {
        if ( drupal_status_server_get_data() ) {
            watchdog('drupal_status', 'Drupal Status successfully ran', array(), WATCHDOG_INFO, l('Drupal status server settings', 'admin/reports/drupal_status_server'));
            if ( $user ) {
                drupal_set_message(t('Drupal Status Server successfully ran'));
            }
        }
        else {
            watchdog('drupal_status', 'Drupal Status Server failed to import email', array(), WATCHDOG_ERROR, l('Drupal status server settings', 'admin/reports/drupal_status_server'));
        }
      # Test drupal_status_cron_run
      variable_set('dss_last_run', time());
    }
}

function drupal_status_server_init(){
  $path = drupal_get_path('module', 'drupal_status_server');
  drupal_add_css( $path.'/drupal_status_server.css' );
}

/**
 * Implementation of hook_theme().
 */
function drupal_status_server_theme() {
  return array(
    'drupal_status_report_body' => array(
      'data' => NULL,
      'decoded' => NULL,
    ),
    'drupal_status_report_teaser' => array(
      'data' => NULL,
      'decoded' => NULL,
    )   
  ); //return array
}

/**
 * Import report data and create nodes
 */
function drupal_status_server_get_data(){
  
  // get emails
  $emails = drupal_status_get_mail();
  return drupal_status_server_save_nodes($emails);
}

/**
 * Save the email reports as nodes
 */
function drupal_status_server_save_nodes($emails){

  $success = FALSE;
  $nodes = array(); // array of nodes to import
  
  foreach($emails as $email){
    // get subject
    $subject = trim(str_ireplace('[status]', '', $email['Subject']));
    
    // if its an html email, we need the plain text part, if available.
    if(strpos($email['Data'], '<html>') !== FALSE && isset($email['Alternative'][0]['Data'])){
      $data = $email['Alternative'][0]['Data']; // plain text is in here.
    }else{
      $data = $email['Data']; // is hopefully plain text TODO: more testing
    }
    $decoded = drupal_status_server_decode_report($data);
    $terms = drupal_status_server_get_taxonomy($decoded);
    $body = theme('drupal_status_report_body', $data, $decoded);
    // instantiate and build new node
    $node = new stdClass();
    $node->type = 'status_report';
    $node->created = time(); // strip off the timezone and milliseconds
    $node->date = date("Y-m-d H:i:s", time());
    $node->title = $subject ? $subject : t('Status Report');
    $node->body = $body ? $body : '';
    $node->teaser = theme('drupal_status_report_teaser', $data, $decoded);
    $node->format = 2; // Full HTML
    $node->changed = time();
    $node->uid = variable_get(DRUPAL_STATUS_DEFAULT_UID, 0);
    $node->name = DRUPAL_STATUS_USERNAME;
    if( isset($terms) && count($terms) ){
      $node->taxonomy = array('tags' => array( variable_get( DRUPAL_STATUS_CATEGORY_DEFAULT_VID, 0) => implode(',',$terms) ));
    }
    $nodes[] = $node;
  }
  $node = NULL; // reset
  // loop and save nodes
  foreach($nodes as $node){
    
    // check if exists, delete old one
    $result = db_query("SELECT nid FROM {node} WHERE type = '%s' AND title='%s'", 'status_report', $node->title);
    while( $row = db_fetch_object($result) ){
      node_delete($row->nid);
    }
    // add default node properties for this type
    node_invoke($node, 'prepare');
    node_invoke_nodeapi($node, 'prepare');
    $node = node_submit($node);
    // save the node
    node_save($node);
    $success = TRUE;
    watchdog('drupal_status', 'Saved report %url', array('%url'=>$node->title), WATCHDOG_INFO, l('Drupal status server settings', 'admin/reports/drupal_status_server'));
    unset($node);
  }
  return $success;
}

/**
 * Reads the configured inbox and build emails array
 */
function drupal_status_get_mail(){
  
  $path = drupal_get_path('module', 'drupal_server_status');
  // REQUIRES THE POP3 MAIL CLASS FROM : http://www.phpclasses.org/browse/package/2.html
  /* APOLOGIES FOR THIS UGLY 3RD PARTY CODE */
  // include libs 
	require($path.'inc/mail/pop3class/pop3.php'); // for pop3 access
	require($path.'inc/mail/mimeparser/mime_parser.php'); // for parsing emails
	require($path.'inc/mail/mimeparser/rfc822_addresses.php'); // for parsing emails
  
  // Configure POP3 import settings
	stream_wrapper_register('pop3', 'pop3_stream');  /* Register the pop3 stream handler class */
	$pop3= new pop3_class;
	$pop3->hostname = variable_get('dss_mail_server', 'mail2.catalyst.net.nz');  /* POP 3 server host name                      */
	$pop3->port = variable_get('dss_mail_port', '110'); /* POP 3 server host port,
	                                            usually 110 but some servers use other ports
	                                            Gmail uses 995                                */
	$pop3->tls = 0;                            /* Establish secure connections using TLS      */
	$user = variable_get('dss_mail_user', 'drupal.status'); /* Authentication user name       */
	$password = variable_get('dss_mail_pass', 'password'); /* Authentication password         */
	$pop3->realm = "";                         /* Authentication realm or domain              */
	$pop3->workstation = "";                   /* Workstation for NTLM authentication         */
	$apop = 0;                                 /* Use APOP authentication                     */
	$pop3->authentication_mechanism = "USER";  /* SASL authentication mechanism               */
	//$pop3->debug = 1;                          /* Output debug information                    */
	//$pop3->html_debug = 1;                     /* Debug information is in HTML                */
	$pop3->join_continuation_header_lines = 1; /* Concatenate headers split in multiple lines */
                                              
	$mime=new mime_parser_class;
	// Set to 0 for not decoding the message bodies
	$mime->decode_bodies = 1;
  // init variables
  $emails = array();
  $error = '';
  // READ INBOX
  // here's where it gets ugly ;)
  // basically we want to get all new emails with [status] in the subject, into an array and return it
  if(($error=$pop3->Open())==""){
    
		if(($error=$pop3->Login($user,$password,$apop))==""){
      
			if(($error=$pop3->Statistics($messages,$size))==""){
        
				if($messages>0){
          $result=$pop3->ListMessages("",0);
          foreach($result as $key => $value){
            $pop3->GetConnectionName($connection_name);
            $message = $key; // msg id
            $message_file='pop3://'.$connection_name.'/'.$message;
            $mime=new mime_parser_class;
            $mime->decode_bodies = 1;
            $parameters=array(
              'File'=>$message_file,
              /* retrieve body parts */
              'SkipBody'=>0,
            );
            // gotta mime decode to get at utf-8 etc...
            $success=$mime->Decode($parameters, $decoded);
            if(!$success){
              $error = 'MIME message decoding error: '.HtmlSpecialChars($mime->error);
            }else{
              if($mime->Analyze($decoded[0], $results)){
                // must contain [status] string in subject line
                if( stripos($results['Subject'], '[status]') !== FALSE){
                  $emails[] = $results; // may contain HTML and plain text content together
                }
                $pop3->DeleteMessage($key); // delete message after loading
              }else{
                $error = 'MIME message analyse error: '.$mime->error;
              }
            }
          }
				}
				if($error=="" && ($error=$pop3->Close())==""){
          // closed the connection
        }
			}
		}
	}
	if($error != ""){
    // log any errors
    watchdog('drupal_status', 'Drupal Status failed to read email !error', array('!error'=>$error), WATCHDOG_ERROR, l('Drupal status server settings', 'admin/reports/drupal_status_server'));
	}
  return $emails;  
}

/**
 * Unserialize the email report data
 */
function drupal_status_server_decode_report($report){
  // trim and strip any newlines
  $report = trim(str_replace( array("\r\n", "\n"), '', $report ));
  return json_decode($report, 1); // 1 = as array
}

/**
 * @ingroup themeable
 * theme function for building report node summary teaser
*/
function theme_drupal_status_report_teaser($data, $decoded = NULL){
  if( ! isset($decoded) ){
    // unserialize data
    $data = drupal_status_server_decode_report($data);
    if( ! $data || ! is_array($data) ){
      watchdog('drupal_status', 'Error decoding data for node body');
      return;
    }
  }else{
    $data = $decoded;
  }
  $header = array('KEY', 'VALUE');
  $rows = array();
  foreach($data['general'] as $key => $value){
    $row = array();
    switch($key){
      case 'site_name':
      case 'version':
      case 'report_date':
      case 'cron_last_interval':
        $row[] = $key;
        $row[] = $value;
        $rows[] = $row;
      break;
    }
  }
  // priority status updates required
  if($data['general']['update_module_installed'] == 'TRUE'){
    $priority_updates = array(1, 4); // security and regular updates available
    foreach($data['modules'] as $key => $value){
      $row = array();
      if( isset($value['status']) && in_array($value['status'], $priority_updates) ){
        $row[] = l($value['name'], 'http://drupal.org/project/'.$value['name'], array('absolute' => TRUE));
        $row[] = array('class' => 'status-'.$value['status'], 'data' => $value['status_description']);
        $rows[] = $row;
      }
    }
  }
  // indicate if update status module installed on remote site
  $row = array();
  $row[] = t('Update Status module installed');
  $row[] = array('class' => 'update-module-'.strtolower($data['general']['update_module_installed']),
                 'data' => $data['general']['update_module_installed']);
  $rows[] = $row;
  
  $teaser = theme('table', $header, $rows, array('class'=>'status-report'));
  return $teaser;
  
}

/**
 * @ingroup themeable
 * theme function for building report node body
 */
function theme_drupal_status_report_body($data, $decoded = NULL){
  if( ! isset($decoded) ){
    // unserialize data if not passed
    $data = drupal_status_server_decode_report($data);
    if( ! $data || ! is_array($data) ){
      watchdog('drupal_status', 'Error decoding data for node body');
      return;
    }
  }else{
    $data = $decoded;
  }
  // Build general data table
  $header = array('KEY', 'VALUE');
  $rows = array();
  foreach($data['general'] as $key => $value){
    $row = array();
    $row[] = $key;
    $row[] = $value;
    $rows[] = $row;
  }
  $general = '<h2>General</h2>'.theme('table', $header, $rows, array('class'=>'status-report'));
  
  // Build module data table
  
  // has update module?
  if($data['general']['update_module_installed'] == 'TRUE'){
    $header = array('STATUS', 'NAME', 'DESC', 'INSTALLED', 'LATEST', 'RECOMMENDED');
    $rows = array();
    foreach($data['modules'] as $key => $value){
      $row = array();
      $row[] = array('class' => 'status-'.$value['status'], 'data' => $value['status_description']);
      $row[] = l($value['name'], 'http://drupal.org/project/'.$value['name'], array('absolute' => TRUE));
      $row[] = $value['description'];
      $row[] = $value['installed_version'];
      $row[] = $value['latest_version'];
      // make link
      // e.g: http://ftp.drupal.org/files/projects/admin_menu-6.x-1.5.tar.gz
      $row[] = l($value['recommended_version'], 'http://ftp.drupal.org/files/projects/'.$value['name'].'-'.$value['recommended_version'].'.tar.gz', array('absolute' => TRUE));
      $rows[] = $row;
    }
  }else{
    // basic data
    $header = array('MODULE', 'NAME', 'DESC', 'VERSION', 'INSTALLED');
    $rows = array();
    //var_dump($data['modules']);
    //exit;
    foreach($data['modules'] as $key => $value){
      $row = array();
      $row[] = $value['name'];
      $row[] = $value['info']['name'];
      $row[] = $value['info']['description'];
      $row[] = $value['info']['version'];
      $row[] = $value['status'] == '1' ? 'Yes' : 'No';
      $rows[] = $row;
    }    
  }
  
  $modules = '<h2>Modules</h2>'.theme('table', $header, $rows, array('class'=>'status-report'));
  
  return $general. '<br />'. $modules;

}

/**
 * Set tags using module vocabulary for report classification
 */
function drupal_status_server_get_taxonomy($data){
  if( ! $data || ! is_array($data) ){
    watchdog('drupal_status', 'Drupal Status failed to read decoded data'); 
    return false;
  }
  // set taxonomy based on module status, if available
  $terms = array();
  // has update module?
  if($data['general']['update_module_installed'] == 'TRUE'){
    foreach( $data['modules'] as $key => $value){
      if( isset($value['status']) ){
        switch($value['status']){
          case '4':
              $terms[] = 'update available';
              if( ! in_array($data['general']['site_name'] .' '. 'update available', $terms)){
                $terms[] = $data['general']['site_name'] .' '. 'update available'; // tag concatentation for per site notifications
              }
            break;
          case '3':
              $terms[] = 'unsupported release';          
            break;
          case '2':
              $terms[] = 'unpublished release';          
            break;
          case '1':
              $terms[] = 'security update available';
              if( ! in_array($data['general']['site_name'] .' '. 'security update available', $terms)){
                $terms[] = $data['general']['site_name'] .' '. 'security update available'; // tag concatentation for per site notifications
              }
            break;
        }
      }
    }
  }
  // add site name to terms
  if( ! empty($data['general']['site_name']) ){
    $terms[] = $data['general']['site_name'];
  }
  // add domain / URL
  if( ! empty($data['general']['SERVER_NAME']) ){
    $terms[] = $data['general']['SERVER_NAME'];
  }
  // add hostname for clustered / multiple webserver sites
  if( ! empty($data['general']['hostname']) ){
    $terms[] = $data['general']['hostname'];
  }
  // add Drupal core version to terms
  if( ! empty($data['general']['version']) ){
    $terms[] = $data['general']['version'];
  }
  // add term for update status module
  if($data['general']['update_module_installed'] == 'FALSE'){
    $terms[] = 'no update status';
  }
  // allow other modules to add / alter terms via hook_drupal_status_terms_alter
  drupal_alter('drupal_status_terms', &$terms, $data);
  return $terms;
}

/**
 * Implementation of hook_views_api().
 */
function drupal_status_server_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'drupal_status_server') . '/inc/views',
  );
}